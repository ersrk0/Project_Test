package in.gov.gem.app.incident.service.impl;

import in.gov.gem.app.incident.domain.entity.*;
import in.gov.gem.app.incident.domain.repository.*;
import in.gov.gem.app.incident.request.IncidentDocMasterDTO;
import in.gov.gem.app.incident.request.IncidentRequestDTO;
import in.gov.gem.app.incident.service.IncidentService;
import in.gov.gem.app.incident.transformer.IncidentTransformer;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@Transactional
public class IncidentServiceImpl implements IncidentService {
    private PreContractIncidentRepository preContractIncidentRepository;
    private PostContractIncidentRepository postContractIncidentRepository;
    private DebarmentDetailRepository debarmentDetailRepository;
    private IncidentStatusLogRepository incidentStatusLogRepository;
    private IncidentMasterRepository incidentMasterRepository;
    private IncidentDocMasterRepository incidentDocMasterRepository;
    private IncidentAttachmentRepository incidentAttachmentRepository;
    @Override
    public void saveIncident(UUID incidentId, long id, String acceptLanguage, IncidentRequestDTO dto) throws IOException {
        IncidentMasterEntity incidentMasterEntity = IncidentTransformer.toIncidentMasterEntity(id, incidentId, dto);
        incidentMasterEntity.setId(id);
        incidentMasterEntity.setIncidentId(incidentId);
        incidentMasterRepository.save(incidentMasterEntity);
        // PreContract data
        if (dto.getPreContractData() != null && !dto.getPreContractData().isEmpty()) {
            List<PreContractIncidentEntity> preEntities = IncidentTransformer.toPreContractEntities(dto.getPreContractData(), id);
            preEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits());
                e.setIncidentMasterFk(id);
            });
            preContractIncidentRepository.saveAll(preEntities);
        }
        // PostContract data
        if (dto.getPostContractData() != null && !dto.getPostContractData().isEmpty()) {
            List<PostContractIncidentEntity> postEntities = IncidentTransformer.toPostContractEntities(dto.getPostContractData(), id);
            postEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits());
                e.setIncidentMasterFk(id);
            });
            postContractIncidentRepository.saveAll(postEntities);
            // Debarment details inside post contract data
            dto.getPostContractData().forEach(postDto -> {
                if (postDto.getDebarmentDetail() != null && !postDto.getDebarmentDetail().isEmpty()) {
                    List<DebarmentDetailEntity> debarmentEntities = IncidentTransformer.toDebarmentEntities(postDto.getDebarmentDetail(), id);
                    debarmentEntities.forEach(d -> {
                        d.setId(UUID.randomUUID().getMostSignificantBits());
                        d.setPostContractIncidentFk(id);
                        // If needed, set postContractFk here
                    });
                    debarmentDetailRepository.saveAll(debarmentEntities);
                }
            });
        }
        // Incident Status Logs
        if (dto.getIncidentStatusLogData() != null && !dto.getIncidentStatusLogData().isEmpty()) {
            List<IncidentStatusLogEntity> logEntities = IncidentTransformer.toStatusLogEntities(dto.getIncidentStatusLogData(), id);
            logEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits());
                e.setIncidentMasterFk(id);
            });
            incidentStatusLogRepository.saveAll(logEntities);
        }
        // Incident Doc Master and Attachments
        if (dto.getIncidentDocMasterData() != null && !dto.getIncidentDocMasterData().isEmpty()) {
            for (IncidentDocMasterDTO docDto : dto.getIncidentDocMasterData()) {
                IncidentDocMasterEntity docEntity = IncidentTransformer.toDocMasterEntity(docDto, id);
                docEntity.setId(UUID.randomUUID().getMostSignificantBits());
                docEntity.setIncidentMasterFk(id);
                incidentDocMasterRepository.save(docEntity);
                if (docDto.getAttachments() != null && !docDto.getAttachments().isEmpty()) {
                    List<IncidentAttachmentEntity> attachmentEntities = IncidentTransformer.toAttachmentEntities(docDto.getAttachments(), id);
                    attachmentEntities.forEach(att -> {
                        att.setId(UUID.randomUUID().getMostSignificantBits());
                        att.setIncidentDocMasterFk(docEntity.getId());
                    });
                    incidentAttachmentRepository.saveAll(attachmentEntities);
                }
            }
        }
        log.info("Incident saved successfully with IncidentId: {} and IncidentPk: {}", incidentId, id);
    }
    @Override
    public List<String> getReasons() {
        return List.of("Catalog-based", "Catalog_ID + SKUID based", "Other");
    }
    @Override
    public List<String> getSeverities() {
        return List.of("Low", "Medium", "High", "Critical");
    }
}
