package in.gov.gem.app.incident.service.impl;

import in.gov.gem.app.incident.domain.entity.*;
import in.gov.gem.app.incident.domain.repository.*;
import in.gov.gem.app.incident.request.IncidentRequestDTO;
import in.gov.gem.app.incident.service.IncidentService;
import in.gov.gem.app.incident.transformer.IncidentTransformer;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@Transactional
public class IncidentServiceImpl implements IncidentService {
    private PreContractIncidentRepository preContractIncidentRepository;
    private PostContractIncidentRepository postContractIncidentRepository;
    private DebarmentDetailRepository debarmentDetailRepository;
    private IncidentStatusLogRepository incidentStatusLogRepository;
    private IncidentMasterRepository incidentMasterRepository;

    public void saveIncident(long id, String acceptLanguage, IncidentRequestDTO dto) throws IOException{
        IncidentMasterEntity incidentMasterEntity = IncidentTransformer.toIncidentMasterEntity(incidentPk.toString(), dto);
        incidentMasterEntity.setId(id);
        //incidentMasterEntity.setIncidentId(incidentId);
        // 4. Save IncidentMasterEntity first (so that child entities can reference it)
        incidentMasterRepository.save(incidentMasterEntity);
        // 5. Save PreContractIncidentEntities if present
        if (dto.getPreContractData() != null && !dto.getPreContractData().isEmpty()) {
            List<PreContractIncidentEntity> preEntities =
                    IncidentTransformer.toPreContractEntities(dto.getPreContractData(), );
            preEntities.forEach(e -> e.setId(incidentMasterEntity)); // Set FK
            preContractIncidentRepository.saveAll(preEntities);
        }
        // 6. Save PostContractIncidentEntities if present, along with their debarment details
        if (dto.getPostContractData() != null && !dto.getPostContractData().isEmpty()) {
            List<PostContractIncidentEntity> postEntities =
                    IncidentTransformer.toPostContractEntities(dto.getPostContractData(), incidentPk);
            postEntities.forEach(e -> e.setIncidentPk(incidentMasterEntity)); // Set FK
            postContractIncidentRepository.saveAll(postEntities);
            // Save DebarmentDetailEntities for each post contract record
            dto.getPostContractData().forEach(postDto -> {
                if (postDto.getDebarmentDetail() != null && !postDto.getDebarmentDetail().isEmpty()) {
                    List<DebarmentDetailEntity> debarmentEntities =
                            IncidentTransformer.toDebarmentEntities(postDto.getDebarmentDetail(), incidentPk);
                    debarmentEntities.forEach(d -> d.setPostContractPk(null)); // Set FK if applicable
                    debarmentDetailRepository.saveAll(debarmentEntities);
                }
            });
        }
        // 7. Save IncidentStatusLogEntities if present
        if (dto.getIncidentStatusLogData() != null && !dto.getIncidentStatusLogData().isEmpty()) {
            List<IncidentStatusLogEntity> logEntities =
                    IncidentTransformer.toStatusLogEntities(dto.getIncidentStatusLogData(), incidentPk);
            logEntities.forEach(e -> e.setIncidentPk(incidentMasterEntity)); // Set FK
            incidentStatusLogRepository.saveAll(logEntities);
        }
        log.info("Incident saved successfully with incidentId: {}", incidentId);
    }


        // âœ… Save Status Logs
       /* if (dto.getStatusLookup() != null && !dto.getStatusLookup().isEmpty()) {
            List<IncidentStatusLogEntity> logEntities =
                    IncidentTransformer.toStatusLogEntities(dto.getStatusLookup(), incidentPk);
            incidentStatusLogRepository.saveAll(logEntities);*/



    @Override
    public List<String> getReasons() {
        return Arrays.asList(
                "Catalog-based",
                "Catalog_ID + SKUID based",
                "Other"
        );
    }
    @Override
    public List<String> getSeverities() {
        return Arrays.asList("Low", "Medium", "High", "Critical");
    }

}
