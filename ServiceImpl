package in.gov.gem.app.incident.service.impl;

import in.gov.gem.app.incident.domain.entity.*;
import in.gov.gem.app.incident.domain.repository.*;
import in.gov.gem.app.incident.request.IncidentRequestDTO;
import in.gov.gem.app.incident.service.IncidentService;
import in.gov.gem.app.incident.transformer.IncidentTransformer;
import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@Transactional
public class IncidentServiceImpl implements IncidentService {
    private PreContractIncidentRepository preContractIncidentRepository;
    private PostContractIncidentRepository postContractIncidentRepository;
    private DebarmentDetailRepository debarmentDetailRepository;
    private IncidentStatusLogRepository incidentStatusLogRepository;
    private IncidentMasterRepository incidentMasterRepository;

    @Override
    public void saveIncident(UUID incidentId,long id, String acceptLanguage, IncidentRequestDTO dto) throws IOException {
        //UUID incidentPk = UUID.randomUUID(); // ✅ Always generate a fresh PK for master
       // String incidentId = "INC-" + System.currentTimeMillis(); // ✅ Custom generated unique ID
        // ✅ Map to IncidentMasterEntity
        IncidentMasterEntity incidentMasterEntity = IncidentTransformer.toIncidentMasterEntity(id,incidentId ,dto);
        incidentMasterEntity.setId(id); // Using given parameter
        incidentMasterEntity.setIncidentId(incidentId);
        // ✅ Save IncidentMasterEntity first
        incidentMasterRepository.save(incidentMasterEntity);
        // ✅ Save PreContractIncidentEntities if present
        if (dto.getPreContractData() != null && !dto.getPreContractData().isEmpty()) {
            List<PreContractIncidentEntity> preEntities =
                    IncidentTransformer.toPreContractEntities(dto.getPreContractData(), id);
            preEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits()); // Generate child PK
                e.setIncidentMasterFk(id); // Set FK
            });
            preContractIncidentRepository.saveAll(preEntities);
        }
        // ✅ Save PostContractIncidentEntities if present
        if (dto.getPostContractData() != null && !dto.getPostContractData().isEmpty()) {
            List<PostContractIncidentEntity> postEntities =
                    IncidentTransformer.toPostContractEntities(dto.getPostContractData(), id);
            postEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits()); // Generate child PK
                e.setId(id); // Set FK
            });
            postContractIncidentRepository.saveAll(postEntities);
            // ✅ Save DebarmentDetailEntities for each post contract record
            dto.getPostContractData().forEach(postDto -> {
                if (postDto.getDebarmentDetail() != null && !postDto.getDebarmentDetail().isEmpty()) {
                    List<DebarmentDetailEntity> debarmentEntities =
                            IncidentTransformer.toDebarmentEntities(postDto.getDebarmentDetail(), id);
                    debarmentEntities.forEach(d -> {
                        d.setId(UUID.randomUUID().getMostSignificantBits()); // Generate child PK
                        d.setId(id); // Set FK// FK to master
                        // If linked to a specific post contract record, setPostContractPk() accordingly
                    });
                    debarmentDetailRepository.saveAll(debarmentEntities);
                }
            });
        }
        // ✅ Save IncidentStatusLogEntities if present
        if (dto.getIncidentStatusLogData() != null && !dto.getIncidentStatusLogData().isEmpty()) {
            List<IncidentStatusLogEntity> logEntities =
                    IncidentTransformer.toStatusLogEntities(dto.getIncidentStatusLogData(), id);
            logEntities.forEach(e -> {
                e.setId(UUID.randomUUID().getMostSignificantBits()); // Generate child PK
                e.setId(id); // Set FK // FK
            });
            incidentStatusLogRepository.saveAll(logEntities);
        }
        log.info("Incident saved successfully with IncidentId: {} and IncidentPk: {}", incidentId, id);
    }
    @Override
    public List<String> getReasons() {
        return Arrays.asList(
                "Catalog-based",
                "Catalog_ID + SKUID based",
                "Other"
        );
    }
    @Override
    public List<String> getSeverities() {
        return Arrays.asList("Low", "Medium", "High", "Critical");
    }
}
